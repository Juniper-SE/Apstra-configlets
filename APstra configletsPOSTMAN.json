{
	"info": {
		"_postman_id": "70d359f4-c1b6-4ae5-8b25-1afa5c6e6d19",
		"name": "Apstra AOS API and Postman Demo",
		"description": "The purpose of this collection is to give you a basic understanding of how to interact with the Apstra AOS API while installing some common configlets.\n\n# What is Apstra AOS?\n\nApstra AOS is Intent-Based Networking software focused on assisting both the network architects and operators, helping them automate designing, building, deploying, and validating data center networks. AOS translates high-level business requirements, referred to as \"intent,\" and translates that into a fully operational data center network environment.\n\nTo learn more about Apstra AOS check out [http://www.apstra.com/](http://www.apstra.com/)\n\n# What does this collection accomplish?\n\nThis demo will show the API calls involved, the correct ordering of APIs, what variables are dynamically saved, and then called, to automate the creation of some common configlets.\n\n## Terminology\n\n*   `Virtual Network` is an L2 forwarding domain. In AOS managed fabric, a Virtual Network can be backed by using either VLANs or VXLANs.\n*   `Blueprint` is a data center Clos (spine and leaf) network managed by AOS.\n    \n\n# Note\n\n> Be sure to and/update the following environmental variables to match your environment.  \n> `AOS_USER`, `AOS_PW`, AND `aos_server_api. remember that the aos_server_api needs to have the aosserver/api at the end dont forget the /api`",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Dirty Net Demo",
			"item": [
				{
					"name": "aos login",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Response is OK\"] = (responseCode.code == 201);",
									"",
									"if (responseCode.code == 201) {",
									"  try { ",
									"      var login_results = JSON.parse(responseBody);",
									"      var token = login_results.token;",
									"      }",
									"  catch(e) {",
									"      console.log(e);",
									"  }",
									"",
									"  pm.collectionVariables.set(\"AOS_TOKEN\", token);",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{AOS_USER}}\",\n  \"password\": \"{{AOS_PW}}\"\n}"
						},
						"url": {
							"raw": "{{aos_server_api}}/user/login",
							"host": [
								"{{aos_server_api}}"
							],
							"path": [
								"user",
								"login"
							]
						},
						"description": "Login to AOS with user/password.  \n\nThe `aos_servier_api` and the user/password variables are Postman environment variables. "
					},
					"response": []
				},
				{
					"name": "List all AOS Blueprints",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Response is OK\"] = (responseCode.code == 200);",
									"",
									"if (responseCode.code == 200) {",
									"  try { ",
									"      var bp_results = JSON.parse(responseBody);",
									"      var bp_id = bp_results.items[0];",
									"      }",
									"  catch(e) {",
									"      console.log(e);",
									"  }",
									"",
									"  postman.setEnvironmentVariable(\"bid\", bp_id);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "OPTIONS",
						"header": [
							{
								"key": "AUTHTOKEN",
								"value": "{{AOS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{aos_server_api}}/blueprints",
							"host": [
								"{{aos_server_api}}"
							],
							"path": [
								"blueprints"
							]
						},
						"description": "Get a list of AOS Blueprints and save the `id` of the first blueprint to a new collection variable `bid`"
					},
					"response": []
				},
				{
					"name": "New SZ",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Response is OK\"] = (responseCode.code == 201);",
									"",
									"pm.environment.set('demo_sz_id', pm.response.json().id);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "AUTHTOKEN",
								"type": "text",
								"value": "{{AOS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"routing_policy\": {\n    \"export_policy\": {\n      \"spine_leaf_links\": false,\n      \"l3edge_server_links\": false,\n      \"l2edge_subnets\": true,\n      \"loopbacks\": false\n    },\n    \"extra_export_routes\": [],\n    \"extra_import_routes\": [],\n    \"import_policy\": \"all\",\n    \"aggregate_prefixes\": []\n  },\n  \"sz_type\": \"evpn\",\n  \"label\": \"{{demo_zone}}\",\n  \"vrf_name\": \"{{demo_zone}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{aos_server_api}}/blueprints/{{bid}}/security-zones",
							"host": [
								"{{aos_server_api}}"
							],
							"path": [
								"blueprints",
								"{{bid}}",
								"security-zones"
							]
						},
						"description": "Create a new SZ.  The name and label reference the collection variable `demo_zone`. \n\nRegister the `id` returned by AOS to a new collection variable `demo_sz_id`.  This will be recalled in the next **PUT** methods to assign IPv4 and IPv6 resources to the new SZ and for the last **POST** method to create a New VN."
					},
					"response": []
				},
				{
					"name": "New SZ PeerLink IPs",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Response is OK\"] = (responseCode.code == 202);",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "AUTHTOKEN",
								"value": "{{AOS_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"pool_ids\": [\n    \"Private-172_16_0_0-12\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{aos_server_api}}/blueprints/{{bid}}/resource_groups/ip/sz%3A{{demo_sz_id}}%2Cleaf_l3_peer_link_link_ips",
							"host": [
								"{{aos_server_api}}"
							],
							"path": [
								"blueprints",
								"{{bid}}",
								"resource_groups",
								"ip",
								"sz%3A{{demo_sz_id}}%2Cleaf_l3_peer_link_link_ips"
							]
						},
						"description": "Assign IPv4 IPs needed by the devices.  This recalls three variables dynamically stored in previous methods. "
					},
					"response": []
				},
				{
					"name": "New SZ Loopback IPs",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Response is OK\"] = (responseCode.code == 202);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "AUTHTOKEN",
								"type": "text",
								"value": "{{AOS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"pool_ids\": [\n    \"Private-10_0_0_0-8\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{aos_server_api}}/blueprints/{{bid}}/resource_groups/ip/sz%3A{{demo_sz_id}}%2Cleaf_loopback_ips",
							"host": [
								"{{aos_server_api}}"
							],
							"path": [
								"blueprints",
								"{{bid}}",
								"resource_groups",
								"ip",
								"sz%3A{{demo_sz_id}}%2Cleaf_loopback_ips"
							]
						},
						"description": "Assign IPv4 IPs needed by the devices.  This recalls three variables dynamically stored in previous methods. "
					},
					"response": []
				},
				{
					"name": "QE: List leaf system_ids",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Response is OK\"] = (responseCode.code == 200);",
									"",
									"index = 1",
									"for (item of JSON.parse(responseBody).items) {",
									"  vname = `sysID${index}`",
									"  pm.environment.set(vname, item.system.id); ",
									"  console.log(`Set ${vname} to ${item.system.id}`)",
									"  index+=1",
									"} "
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "AUTHTOKEN",
								"value": "{{AOS_TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\" : \"match(node('system', role='leaf', name='system'))\"\n}"
						},
						"url": {
							"raw": "{{aos_server_api}}/blueprints/{{bid}}/qe",
							"host": [
								"{{aos_server_api}}"
							],
							"path": [
								"blueprints",
								"{{bid}}",
								"qe"
							]
						},
						"description": "The method call queries the AOS graph database to retrieve all the leafs and their assigned `system_id`.  AOS uses a `system_id` as a way to abstract the underlying systems.  The benefit here is the workflow and API remain constant regardless of the network switch, operating system, enforcement policy, etc.  \n\nFurthermore, if a user were to replace the network switch with another switch, even of a different vendor, AOS will automatically normalize the configuration, data, and analytics required.  But that is for another demo :) "
					},
					"response": []
				},
				{
					"name": "New VN",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Response is OK\"] = (responseCode.code == 201);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "AUTHTOKEN",
								"value": "{{AOS_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"l3_connectivity\": \"l3Disabled\",\n  \"bound_to\": [\n    {\n      \"system_id\": \"{{sysID1}}\"\n    },\n    {\n      \"system_id\": \"{{sysID2}}\"\n    },\n    {\n      \"system_id\": \"{{sysID3}}\"\n    }\n  ],\n  \"label\": \"dirty-net\",\n  \"vn_type\": \"vxlan\",\n  \"security_zone_id\": \"{{demo_sz_id}}\",\n  \"dhcp_service\": \"dhcpServiceDisabled\"\n}"
						},
						"url": {
							"raw": "{{aos_server_api}}/blueprints/{{bid}}/virtual-networks",
							"host": [
								"{{aos_server_api}}"
							],
							"path": [
								"blueprints",
								"{{bid}}",
								"virtual-networks"
							]
						},
						"description": "Get token"
					},
					"response": []
				}
			],
			"description": "Folder contains all the methods to create a new SZ and VN for the first data center pod managed by a Apstra AOS data center.  It will assign the VN to every not in the data center. ",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Apstra Configlet installer",
			"item": [
				{
					"name": "aos login",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Response is OK\"] = (responseCode.code == 201);",
									"",
									"if (responseCode.code == 201) {",
									"  try { ",
									"      var login_results = JSON.parse(responseBody);",
									"      var token = login_results.token;",
									"      }",
									"  catch(e) {",
									"      console.log(e);",
									"  }",
									"",
									"  pm.collectionVariables.set(\"AOS_TOKEN\", token);",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{AOS_USER}}\",\n  \"password\": \"{{AOS_PW}}\"\n}"
						},
						"url": {
							"raw": "{{aos_server_api}}/user/login",
							"host": [
								"{{aos_server_api}}"
							],
							"path": [
								"user",
								"login"
							]
						},
						"description": "Login to AOS with user/password.  \n\nThe `aos_servier_api` and the user/password variables are Postman environment variables. "
					},
					"response": []
				},
				{
					"name": "List all AOS Blueprints",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Response is OK\"] = (responseCode.code == 200);",
									"",
									"if (responseCode.code == 200) {",
									"  try { ",
									"      var bp_results = JSON.parse(responseBody);",
									"      var bp_id = bp_results.items[0];",
									"      }",
									"  catch(e) {",
									"      console.log(e);",
									"  }",
									"",
									"  postman.setEnvironmentVariable(\"bid\", bp_id);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "OPTIONS",
						"header": [
							{
								"key": "AUTHTOKEN",
								"value": "{{AOS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{aos_server_api}}/blueprints",
							"host": [
								"{{aos_server_api}}"
							],
							"path": [
								"blueprints"
							]
						},
						"description": "Get a list of AOS Blueprints and save the `id` of the first blueprint to a new collection variable `bid`"
					},
					"response": []
				},
				{
					"name": "QE: List leaf system_ids",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Response is OK\"] = (responseCode.code == 200);",
									"",
									"index = 1",
									"for (item of JSON.parse(responseBody).items) {",
									"  vname = `sysID${index}`",
									"  pm.environment.set(vname, item.system.id); ",
									"  console.log(`Set ${vname} to ${item.system.id}`)",
									"  index+=1",
									"} "
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "AUTHTOKEN",
								"value": "{{AOS_TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\" : \"match(node('system', role='leaf', name='system'))\"\n}"
						},
						"url": {
							"raw": "{{aos_server_api}}/blueprints/{{bid}}/qe",
							"host": [
								"{{aos_server_api}}"
							],
							"path": [
								"blueprints",
								"{{bid}}",
								"qe"
							]
						},
						"description": "The method call queries the AOS graph database to retrieve all the leafs and their assigned `system_id`.  AOS uses a `system_id` as a way to abstract the underlying systems.  The benefit here is the workflow and API remain constant regardless of the network switch, operating system, enforcement policy, etc.  \n\nFurthermore, if a user were to replace the network switch with another switch, even of a different vendor, AOS will automatically normalize the configuration, data, and analytics required.  But that is for another demo :) "
					},
					"response": []
				},
				{
					"name": "New VN",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Response is OK\"] = (responseCode.code == 201);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "AUTHTOKEN",
								"value": "{{AOS_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"l3_connectivity\": \"l3Disabled\",\n  \"bound_to\": [\n    {\n      \"system_id\": \"{{sysID1}}\"\n    },\n    {\n      \"system_id\": \"{{sysID2}}\"\n    },\n    {\n      \"system_id\": \"{{sysID3}}\"\n    }\n  ],\n  \"label\": \"dirty-net\",\n  \"vn_type\": \"vxlan\",\n  \"security_zone_id\": \"{{demo_sz_id}}\",\n  \"dhcp_service\": \"dhcpServiceDisabled\"\n}"
						},
						"url": {
							"raw": "{{aos_server_api}}/blueprints/{{bid}}/virtual-networks",
							"host": [
								"{{aos_server_api}}"
							],
							"path": [
								"blueprints",
								"{{bid}}",
								"virtual-networks"
							]
						},
						"description": "Get token"
					},
					"response": []
				},
				{
					"name": "junos install dual RE configlet",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "AUTHTOKEN",
								"value": "{{AOS_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ref_archs\": [\n        \"two_stage_l3clos\"\n    ],\n    \"created_at\": \"2022-03-28T19:11:31.231232Z\",\n    \"last_modified_at\": \"2022-03-28T19:11:31.231232Z\",\n    \"generators\": [\n        {\n            \"config_style\": \"junos\",\n            \"section\": \"set_based_system\",\n            \"template_text\": \"set system commit synchronize\\nset groups re0 interfaces em1 unit 0 family inetaddress {{re0_ipv4inet}}\\nset groups re0 interfaces em1 unit 0 family inetaddress {{re0_ipv4inet_master}} master-only\\nset groups re1 interfaces em1 unit 0 family inetaddress {{re1_ipv4inet}}\\nset groups re1 interfaces em1 unit 0 family inetaddress {{re1_ipv4inet_master}} master-only\\nset chassis redundancy routing-engine 0 master\\nset chassis redundancy routing-engine 1 backup\\nset chassis redundancy failover on-loss-of-keepalives\\nset chassis redundancy failover on-disk-failure\\nset chassis redundancy graceful-switchover\",\n            \"negation_template_text\": \"\",\n            \"filename\": \"\"\n        }\n    ],\n    \"display_name\": \"JUNOS_dualRE\",\n    \"id\": \"0ecda7dc-0a4d-4c4f-ab1f-bf2503eae4ba\"\n}"
						},
						"url": {
							"raw": "{{aos_server_api}}/design/configlets",
							"host": [
								"{{aos_server_api}}"
							],
							"path": [
								"design",
								"configlets"
							]
						},
						"description": "This installs the dualRE configlet. There are some property sets that need installing too."
					},
					"response": []
				},
				{
					"name": "junos install dual RE property-set",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "AUTHTOKEN",
								"value": "{{AOS_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"values\": {\n        \"re1_ipv4inet_master\": \" 192.168.0.50/24\", \n        \"re0_ipv4inet\": \" 192.168.0.51/24\", \n        \"re1_ipv4inet\": \" 192.168.0.52/24\", \n        \"re0_ipv4inet_master\": \" 192.168.0.50/24\"\n    }, \n    \"label\": \"dualRE_PropertySet\"\n}"
						},
						"url": {
							"raw": "{{aos_server_api}}/property-sets",
							"host": [
								"{{aos_server_api}}"
							],
							"path": [
								"property-sets"
							]
						},
						"description": "This installs the dualRE configlet. There are some property sets that need installing too."
					},
					"response": []
				},
				{
					"name": "junos duplicateMACdetectionTimer",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "AUTHTOKEN",
								"value": "{{AOS_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ref_archs\": [\n        \"two_stage_l3clos\"\n    ],\n    \"created_at\": \"2022-03-28T19:11:31.231232Z\",\n    \"last_modified_at\": \"2022-03-28T19:11:31.231232Z\",\n    \"generators\": [\n        {\n            \"config_style\": \"junos\",\n            \"section\": \"set_based_system\",\n            \"template_text\": \"set system commit synchronize\\nset groups re0 interfaces em1 unit 0 family inetaddress {{re0_ipv4inet}}\\nset groups re0 interfaces em1 unit 0 family inetaddress {{re0_ipv4inet_master}} master-only\\nset groups re1 interfaces em1 unit 0 family inetaddress {{re1_ipv4inet}}\\nset groups re1 interfaces em1 unit 0 family inetaddress {{re1_ipv4inet_master}} master-only\\nset chassis redundancy routing-engine 0 master\\nset chassis redundancy routing-engine 1 backup\\nset chassis redundancy failover on-loss-of-keepalives\\nset chassis redundancy failover on-disk-failure\\nset chassis redundancy graceful-switchover\",\n            \"negation_template_text\": \"\",\n            \"filename\": \"\"\n        }\n    ],\n    \"display_name\": \"JUNOS_dualRE\",\n    \"id\": \"0ecda7dc-0a4d-4c4f-ab1f-bf2503eae4ba\"\n}"
						},
						"url": {
							"raw": "{{aos_server_api}}/design/configlets",
							"host": [
								"{{aos_server_api}}"
							],
							"path": [
								"design",
								"configlets"
							]
						},
						"description": "This installs the dualRE configlet. There are some property sets that need installing too."
					},
					"response": []
				},
				{
					"name": "junos_license",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "AUTHTOKEN",
								"value": "{{AOS_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ref_archs\": [\n        \"two_stage_l3clos\"\n    ],\n    \"generators\": [\n        {\n            \"config_style\": \"junos\",\n            \"section\": \"set_based_system\",\n                      \"template_text\": \"set system license keys key \\\\\\\"E20191218001 AAAAAA BBBBB CCCCC DDDDD EEEEE FFFFF GGGGG HHHHH IIIII JJJJJJ KKKKKK LLLLLL MMMMMM NNNNN OOOOO PPPPP RRRRR SSSSS TTTTT UUUUU\\\\\\\"\",\n            \"negation_template_text\": \"\",\n            \"filename\": \"\"\n        }\n    ],\n    \"display_name\": \"junos_license\"\n}"
						},
						"url": {
							"raw": "{{aos_server_api}}/design/configlets",
							"host": [
								"{{aos_server_api}}"
							],
							"path": [
								"design",
								"configlets"
							]
						},
						"description": "This installs the dualRE configlet. There are some property sets that need installing too."
					},
					"response": []
				},
				{
					"name": "junos ddos protection for vxlan",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "AUTHTOKEN",
								"value": "{{AOS_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ref_archs\": [\n        \"two_stage_l3clos\"\n    ],\n    \"created_at\": \"2022-03-28T19:11:31.231232Z\",\n    \"last_modified_at\": \"2022-03-28T19:11:31.231232Z\",\n    \"generators\": [\n        {\n            \"config_style\": \"junos\",\n            \"section\": \"set_based_system\",\n            \"template_text\": \"set system ddos-protection protocols vxlan aggregate bandwidth 1000\\nset system ddos-protection protocols vxlan aggregate burst 400\\n\",\n            \"negation_template_text\": \"\",\n            \"filename\": \"\"\n        }\n    ],\n    \"display_name\": \"DDOS_vxlan_protection\"\n}"
						},
						"url": {
							"raw": "{{aos_server_api}}/design/configlets",
							"host": [
								"{{aos_server_api}}"
							],
							"path": [
								"design",
								"configlets"
							]
						},
						"description": "This installs the dualRE configlet. There are some property sets that need installing too."
					},
					"response": []
				},
				{
					"name": "junos qfx10k-hashing-fix",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "AUTHTOKEN",
								"value": "{{AOS_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ref_archs\": [\n        \"two_stage_l3clos\"\n    ],\n    \"created_at\": \"2022-03-28T19:11:31.231232Z\",\n    \"last_modified_at\": \"2022-03-28T19:11:31.231232Z\",\n    \"generators\": [\n        {\n            \"config_style\": \"junos\",\n            \"section\": \"set_based_system\",\n            \"template_text\": \"set forwarding-options hash-key family inet layer-4\\n\",\n            \"negation_template_text\": \"\",\n            \"filename\": \"\"\n        }\n    ],\n    \"display_name\": \"QFX10K-HashingFix\"\n}"
						},
						"url": {
							"raw": "{{aos_server_api}}/design/configlets",
							"host": [
								"{{aos_server_api}}"
							],
							"path": [
								"design",
								"configlets"
							]
						},
						"description": "This installs the dualRE configlet. There are some property sets that need installing too."
					},
					"response": []
				},
				{
					"name": "junos MAC_move_supression",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "AUTHTOKEN",
								"value": "{{AOS_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ref_archs\": [\n        \"two_stage_l3clos\"\n    ],\n    \"generators\": [\n        {\n            \"config_style\": \"junos\",\n            \"section\": \"set_based_system\",\n            \"template_text\": \"set protocols evpn duplicate-mac-detection detection-threshold 6 detection-window 180 auto-recovery-time 5\\n\",\n            \"negation_template_text\": \"\",\n            \"filename\": \"\"\n        }\n    ],\n    \"display_name\": \"MAC_move_suppression\"\n}"
						},
						"url": {
							"raw": "{{aos_server_api}}/design/configlets",
							"host": [
								"{{aos_server_api}}"
							],
							"path": [
								"design",
								"configlets"
							]
						},
						"description": "This installs the dualRE configlet. There are some property sets that need installing too."
					},
					"response": []
				},
				{
					"name": "junos mirroring remote configlet",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "AUTHTOKEN",
								"value": "{{AOS_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ref_archs\": [\n        \"two_stage_l3clos\"\n    ], \n    \"generators\": [\n        {\n            \"config_style\": \"junos\", \n            \"section\": \"system\", \n            \"template_text\": \"forwarding-options {\\n        analyzer {\\n                MirrorSessionRemote {\\n                        input {\\n                                ingress {\\n                                        interface {{r_input_ingress_if}};\\n                                }\\n                                egress {\\n                                        interface {{r_input_egress_if}};\\n                                }       \\n                        }       \\n                        output {\\n                                ip-address {{r_output_if}};\\n                        }\\n                }\\n        }\\n}\", \n            \"negation_template_text\": \"\", \n            \"filename\": \"\"\n        }\n    ], \n    \"display_name\": \"JUNOS Mirroring Session Remote\"\n}"
						},
						"url": {
							"raw": "{{aos_server_api}}/design/configlets",
							"host": [
								"{{aos_server_api}}"
							],
							"path": [
								"design",
								"configlets"
							]
						},
						"description": "This installs the dualRE configlet. There are some property sets that need installing too."
					},
					"response": []
				},
				{
					"name": "junos mirroring remote property-set",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "AUTHTOKEN",
								"value": "{{AOS_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"values\": {\n        \"r_output_if\": \"10.250.0.1\", \n        \"r_input_ingress_if\": \"xe-0/0/5.0\", \n        \"r_input_egress_if\": \"xe-0/0/5.0\"\n    }, \n    \"label\": \"JUNOS Mirroring Session Remote\"\n}"
						},
						"url": {
							"raw": "{{aos_server_api}}/property-sets",
							"host": [
								"{{aos_server_api}}"
							],
							"path": [
								"property-sets"
							]
						},
						"description": "This installs the dualRE configlet. There are some property sets that need installing too."
					},
					"response": []
				},
				{
					"name": "junos mirroring local configlet",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "AUTHTOKEN",
								"value": "{{AOS_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ref_archs\": [\n        \"two_stage_l3clos\"\n    ], \n    \"generators\": [\n        {\n            \"config_style\": \"junos\", \n            \"section\": \"system\", \n            \"template_text\": \"forwarding-options {\\n    analyzer {\\n        MirrorSessionLocal {\\n            input {\\n                ingress {\\n                    interface {{input_ingress_if}};\\n                }\\n                egress {\\n                    interface {{input_egress_if}};\\n                }\\n            }\\n            output {\\n                interface {{output_if}};\\n            }\\n        }\\n    }\\n}\", \n            \"negation_template_text\": \"\", \n            \"filename\": \"\"\n        }\n    ], \n    \"display_name\": \"JUNOS Mirroring Session Local\"\n}"
						},
						"url": {
							"raw": "{{aos_server_api}}/design/configlets",
							"host": [
								"{{aos_server_api}}"
							],
							"path": [
								"design",
								"configlets"
							]
						},
						"description": "This installs the dualRE configlet. There are some property sets that need installing too."
					},
					"response": []
				},
				{
					"name": "junos mirroring local property-set",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "AUTHTOKEN",
								"value": "{{AOS_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"values\": {\n        \"output_if\": \"xe-0/0/10.0\", \n        \"input_egress_if\": \"xe-0/0/5.0\", \n        \"input_ingress_if\": \"xe-0/0/5.0\"\n    }, \n    \"label\": \"JUNOS Mirroring Session Local\"\n}"
						},
						"url": {
							"raw": "{{aos_server_api}}/property-sets",
							"host": [
								"{{aos_server_api}}"
							],
							"path": [
								"property-sets"
							]
						},
						"description": "This installs the dualRE configlet. There are some property sets that need installing too."
					},
					"response": []
				},
				{
					"name": "junos sflow",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "AUTHTOKEN",
								"value": "{{AOS_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ref_archs\": [\n        \"two_stage_l3clos\"\n    ],\n    \"generators\": [\n        {\n            \"config_style\": \"junos\",\n            \"section\": \"system\",\n            \"template_text\": \"protocols {\\n    sflow {\\n        polling-interval 5;\\n        source-ip {{management_ip}};\\n        sample-rate {\\n            ingress 1000;\\n            egress 1000;\\n        }\\n        collector 10.10.10.2 {\\n            udp-port 6343;\\n        }\\n        interfaces xe-0/0/0.0;\\n        interfaces xe-0/0/1.0;\\n        interfaces xe-0/0/2.0;\\n        interfaces xe-0/0/3.0;\\n        interfaces xe-0/0/4.0;\\n        interfaces xe-0/0/5.0;\\n        interfaces xe-0/0/6.0;\\n        interfaces xe-0/0/7.0;\\n        interfaces xe-0/0/8.0;\\n        interfaces xe-0/0/9.0;\\n        interfaces xe-0/0/10.0;\\n        interfaces xe-0/0/11.0;\\n    }\\n}\\nrouting-options {\\n    static {\\n        route 10.10.10.2/32 next-table mgmt_junos.inet.0;\\n    }\\n}\\n\",\n            \"negation_template_text\": \"\",\n            \"filename\": \"\"\n        }\n    ],\n    \"display_name\": \"junos_sflow\"\n}"
						},
						"url": {
							"raw": "{{aos_server_api}}/design/configlets",
							"host": [
								"{{aos_server_api}}"
							],
							"path": [
								"design",
								"configlets"
							]
						},
						"description": "This installs the dualRE configlet. There are some property sets that need installing too."
					},
					"response": []
				},
				{
					"name": "get apstra configlets",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "AUTHTOKEN",
								"value": "{{AOS_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{aos_server_api}}/design/configlets",
							"host": [
								"{{aos_server_api}}"
							],
							"path": [
								"design",
								"configlets"
							]
						},
						"description": "This installs the dualRE configlet. There are some property sets that need installing too."
					},
					"response": []
				}
			],
			"description": "Folder contains all the methods to import some common configlets into apstra via the rest API",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "AOS_TOKEN",
			"value": ""
		}
	]
}