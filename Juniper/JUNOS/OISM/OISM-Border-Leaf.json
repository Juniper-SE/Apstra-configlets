{
  "ref_archs": [
    "two_stage_l3clos"
  ],
  "generators": [
    {
      "config_style": "junos",
      "section": "system",
      "template_text": "forwarding-options {\n    multicast-replication {\n        evpn {\n            irb oism;\n        }\n    }\n}\n{% for v in (vlan |d({})).values() if v.get('name', '').endswith('-SBD') and v.get('ipv4_address') and v.get('ipv4_prefixlen') and v.vrf_name+'=' in PIM %}\n{% if loop.first %}\npolicy-options {\n{% endif %}\n{% for pim in PIM.split(';') if pim.strip().startswith(v.vrf_name+'=') %}\n    policy-statement {{ v.vrf_name }}-external-mc-router {\n        term 1 {\n            from {\n                prefix-list {{ v.vrf_name }}-peer-pim-neighbors;\n            }\n            then accept;\n        }\n        term 2 {\n            then reject;\n        }\n    }\n    prefix-list {{ v.vrf_name }}-peer-pim-neighbors {\n        {% for ip in pim.split('=')[1].split(',') %}\n        {{ ip }}/32;\n        {% endfor %}\n    }\n{% endfor %}\n{% if loop.last %}\n}\n{% endif %}\n{% endfor %}\n{% for v in (vlan |d({})).values() if v.get('name', '').endswith('-SBD') and v.get('ipv4_address') and v.get('ipv4_prefixlen') %}\n{% if loop.first %}\nrouting-instances {\n{% endif %}\n    {{ v.vrf_name }} {\n        protocols {\n            evpn {\n                oism {\n                    supplemental-bridge-domain-irb irb.{{ v.id }};\n                    {% for m in (vlan |d({})).values() if m.get('name', '').endswith('-MVLAN') and m.vrf_name == v.vrf_name %}\n                    {% if loop.first %}\n                    pim-evpn-gateway {\n                    {% endif %}\n                        external-irb irb.{{ m.id }};\n                    {% if loop.last %}\n                    }\n                    {% endif %}\n                    {% endfor %}\n                }\n            }\n            pim {\n                {% for rp in RP.split(';') if rp.strip().startswith(v.vrf_name+'=') %}\n                {% if loop.first %}\n                rp {\n                    static {\n                {% endif %}\n                        {% for ip in rp.split('=')[1].split(',') %}\n                        address {{ ip }};\n                        {% endfor %}\n                {% if loop.last %}\n                    }\n                }\n                {% endif %}\n                {% endfor %}\n                {% for i in (vlan |d({})).values() if i.vrf_name == v.vrf_name and i.impl_type == 'vxlan' and not i.get('name', '').endswith('-SBD') and not i.get('name', '').endswith('-MVLAN') %}\n                interface irb.{{ i.id }} {\n                    distributed-dr;\n                }\n                {% endfor %}\n                {% for m in (vlan |d({})).values() if m.get('name', '').endswith('-MVLAN') and m.vrf_name == v.vrf_name %}\n                {% if m.vrf_name in PIM %}\n                interface irb.{{ m.id }} {\n                    accept-join-always-from {{ v.vrf_name }}-external-mc-router;\n                }\n                {% else %}\n                interface irb.{{ m.id }};\n                {% endif %}\n                {% endfor %}\n                interface irb.{{ v.id }};\n                {% for l in (loopbacks |d({})).values() if l.vrf_name == v.vrf_name %}\n                interface {{ l.name }};\n                {% endfor %}\n            }\n        }\n    }\n{% if loop.last %}\n}\n{% endif %}\n{% endfor %}\nprotocols {\n    igmp-snooping {\n        vlan all {\n            proxy;\n        }\n        {% for v in (vlan |d({})).values() if v.get('name', '').endswith('-SBD') and v.get('ipv4_address') and v.get('ipv4_prefixlen') %}\n        {% for m in (vlan |d({})).values() if m.get('name', '').endswith('-MVLAN') and m.vrf_name == v.vrf_name %}\n        {% for intf in interface.values() if m.id |string in intf.allowed_vlans and not intf.get('part_of') %}\n        {% if loop.first %}\n        vlan vn{{ m.id }} {\n        {% endif %}\n            interface {{ intf.intfName }}.0 {\n                multicast-router-interface;\n            }\n        {% if loop.last %}\n        }\n        {% endif %}\n        {% endfor %}\n        {% endfor %}\n        {% endfor %}\n    }\n}\n{% if hcl.startswith('Juniper_QFX1000') %}\nmulticast-snooping-options {\n    oism {\n        install-star-g-routes;\n    }\n}\n{% endif %}\n",
      "negation_template_text": "",
      "filename": ""
    }
  ],
  "created_at": "2023-08-30T20:00:10.923390Z",
  "id": "a6ad10f7-5f3d-49db-b81d-4771f8d59279",
  "last_modified_at": "2023-08-30T20:00:10.923390Z",
  "display_name": "OISM-Border-Leaf"
}
